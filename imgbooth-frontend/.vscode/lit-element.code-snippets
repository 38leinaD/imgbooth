{
	// Place your txm-groovy-webapp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"lit-element view": {
		"prefix": [
			"view"
		],
		"body": [
			"import { LitElement, html, css, property, customElement } from '../lib/lit-element.js';",
			"",
			"@customElement('my-element')",
			"class $TM_FILENAME_BASE extends LitElement {",
			"    @property({ type: String })",
			"    greeting = '?';",
			"",
			"    constructor() {",
			"        super();",
			"",
			"        this.greeting = 'Daniel';",
			"    }",
			"",
			"    connectedCallback() {",
			"        super.connectedCallback();",
			"    }",
			"",
			"    disconnectedCallback() {",
			"    }",
			"",
			"    firstUpdated(changedProperties) {",
			"    }",
			"",
			"    updated(changedProperties) {",
			"    }",
			"",
			"    render() {",
			"        return html`",
			"        <div>hello ${this.greeting}</div>",
			"        `;",
			"    }",
			"",
			"    static get styles() {",
			"        return css`",
			"        `;",
			"    }",
			"}",
			"",
		],
		"description": "LitElement view-class"
	}
}